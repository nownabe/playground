#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "strscan"

class ErlangParser < Racc::Parser

module_eval(<<'...end erlang.ry/module_eval...', 'erlang.ry', 27)

def parse(str)
  ss = StringScanner.new(str)
  @tokens = []

  until ss.eos?
    ss.scan(/"(.+)"/)       ? @tokens << [:STRING,      ss[1]] :
    ss.scan(/\d+\.\d+/)     ? @tokens << [:FLOAT,       ss.matched] :
    ss.scan(/\d+/)          ? @tokens << [:INTEGER,     ss.matched] :
    ss.scan(/\[/)           ? @tokens << [:LIST_BEGIN,  ss.matched] :
    ss.scan(/\]/)           ? @tokens << [:LIST_END,    ss.matched] :
    ss.scan(/{/)            ? @tokens << [:TUPLE_BEGIN, ss.matched] :
    ss.scan(/}/)            ? @tokens << [:TUPLE_END,   ss.matched] :
    ss.scan(/'([-\w_@]+)'/) ? @tokens << [:ATOM,        ss[1]] :
    ss.scan(/[a-z][\w_@]+/) ? @tokens << [:ATOM,        ss.matched] :
    ss.scan(/,/)            ? @tokens << [:COMMA,       ss.matched] :
    ss.scan(/\s/)           ? nil :
    (raise "scanner error")
  end

  do_parse
end

def next_token
  @tokens.shift
end
...end erlang.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,    19,     5,     6,    20,    12,    13,    14,    15,     4,
    18,     5,    17,   nil,    12,    13,    14,    15,     4,     8,
     5,    21,    20,    12,    13,    14,    15,     4,   nil,     5 ]

racc_action_check = [
    20,     7,    20,     1,     7,    20,    20,    20,    20,     5,
     6,     5,     5,   nil,     5,     5,     5,     5,     4,     4,
     4,    16,    16,     4,     4,     4,     4,     0,   nil,     0 ]

racc_action_pointer = [
    25,     3,   nil,   nil,    16,     7,    10,    -2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,
    -2,   nil,   nil ]

racc_action_default = [
   -15,   -15,    -1,    -2,   -15,   -15,   -15,   -15,    -4,    -7,
    -9,   -10,   -11,   -12,   -13,   -14,   -15,    -6,    23,    -3,
   -15,    -5,    -8 ]

racc_goto_table = [
     7,    16,     3,     2,     1,    22 ]

racc_goto_check = [
     4,     4,     3,     2,     1,     5 ]

racc_goto_pointer = [
   nil,     4,     3,     2,    -4,   -15 ]

racc_goto_default = [
   nil,   nil,    10,    11,   nil,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  3, 13, :_reduce_3,
  2, 13, :_reduce_4,
  3, 14, :_reduce_5,
  2, 14, :_reduce_6,
  1, 15, :_reduce_7,
  3, 15, :_reduce_8,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 16, :_reduce_11,
  1, 16, :_reduce_12,
  1, 16, :_reduce_13,
  1, 16, :_reduce_14 ]

racc_reduce_n = 15

racc_shift_n = 23

racc_token_table = {
  false => 0,
  :error => 1,
  :LIST_BEGIN => 2,
  :LIST_END => 3,
  :TUPLE_BEGIN => 4,
  :TUPLE_END => 5,
  :COMMA => 6,
  :ATOM => 7,
  :STRING => 8,
  :INTEGER => 9,
  :FLOAT => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LIST_BEGIN",
  "LIST_END",
  "TUPLE_BEGIN",
  "TUPLE_END",
  "COMMA",
  "ATOM",
  "STRING",
  "INTEGER",
  "FLOAT",
  "$start",
  "statement",
  "list",
  "tuple",
  "elements",
  "element" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'erlang.ry', 5)
  def _reduce_3(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 6)
  def _reduce_4(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 8)
  def _reduce_5(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 9)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 11)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 12)
  def _reduce_8(val, _values, result)
     result << val[2]  
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'erlang.ry', 16)
  def _reduce_11(val, _values, result)
     result = val[0].to_sym 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 17)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 18)
  def _reduce_13(val, _values, result)
     result = val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'erlang.ry', 19)
  def _reduce_14(val, _values, result)
     result = val[0].to_f 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ErlangParser
